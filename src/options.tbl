// ****************************************************************************
//  options.tbl                                                   XL project
// ****************************************************************************
//
//   File Description:
//
//     This table defines the options known to the compiler.
//
//
//
//
//
//
//
//
// ****************************************************************************
// This document is released under the GNU General Public License, with the
// following clarification and exception.
//
// Linking this library statically or dynamically with other modules is making
// a combined work based on this library. Thus, the terms and conditions of the
// GNU General Public License cover the whole combination.
//
// As a special exception, the copyright holders of this library give you
// permission to link this library with independent modules to produce an
// executable, regardless of the license terms of these independent modules,
// and to copy and distribute the resulting executable under terms of your
// choice, provided that you also meet, for each linked independent module,
// the terms and conditions of the license of that module. An independent
// module is a module which is not derived from or based on this library.
// If you modify this library, you may extend this exception to your version
// of the library, but you are not obliged to do so. If you do not wish to
// do so, delete this exception statement from your version.
//
// See http://www.gnu.org/copyleft/gpl.html and Matthew 25:22 for details
//  (C) 1992-2010 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2010 Jerome Forissier <jerome@taodyne.com>
//  (C) 2010 Taodyne SAS
// ****************************************************************************
// Keywords:
// OPTVAR defines an option-controlling variable
// OPTION defines an option and associated code
//
// Only the beginning of the option is checked for a match. The largest
// matching option is considered good, so short options should be first


// ============================================================================
//
//    XL options
//
// ============================================================================

// Getting help on options
OPTION(h, "List usage information and exit", Usage(args[0].c_str()); exit(0))

// Rendering control
OPTVAR(stylesheet, text, "xl")
OPTION(style, "Select the stylesheet",
       stylesheet = STRING;
       if (stylesheet.find(".stylesheet") == stylesheet.npos)
           stylesheet += ".stylesheet";
       if (stylesheet.find("/") == stylesheet.npos)
           stylesheet = MAIN->SearchLibFile(stylesheet);
       Renderer::renderer->SelectStyleSheet(stylesheet))

// Parse only
OPTVAR(parseOnly, bool, false)
OPTION(parse, "Only parse file, do not compile nor run", parseOnly = true)
OPTVAR(signedConstants, bool, false)
OPTION(signed, "Parse -1 as a constant, not unary minus prefix",
       signedConstants = true)
OPTVAR(showSource, bool, false)
OPTION(show, "Show source file", showSource = true)

// Builtins file
OPTVAR(builtins, text, "builtins.xl")
OPTION(builtins, "Select the builtins file", builtins = STRING)

// Do not load builtins file
OPTION(nobuiltins, "Do not load builtins", builtins = "")
OPTION(nb, "Short form for -nobuiltins", builtins = "")

// Select if we read or write in serialized or crypted format
OPTVAR(packed,  bool, false)
OPTVAR(crypted, bool, false)
OPTION(packed,  "Allow packed input", packed = true)
OPTION(crypted, "Allow crypted input", crypted = true)

OPTVAR(pack,    bool, false)
OPTVAR(crypt,   bool, false)
OPTION(pack,    "Write packed format", pack = true)
OPTION(crypt,   "Write crypted format", crypt = true)

// Compile only
OPTVAR(compileOnly, bool, false)
OPTION(compile, "Only compile file, do not run", compileOnly = true)

// Debug controlling options
OPTVAR(debug, bool, false)
OPTION(g, "Compile with debugging information", debug=true)

// LLVM options
OPTION(llvm, "Pass an LLVM option", PassOptionToLLVM(argval))

// Warning-level option
OPTVAR(warning_level, uint, 0)
OPTION(w, "Set the warning level, from 0 to 5",
       warning_level = INTEGER(0, 5))
OPTION(pedantic, "Set the maximum warning level",
       warning_level = 5)

// Optimize level options
// -O0 means interpreted
// -O3 means new-style full compilation with type inference
OPTVAR(optimize_level, uint, 0)
OPTION(O, "Set the optimization level, from 0 to 3",
       optimize_level = INTEGER(0, 3))
OPTVAR(verbose,bool,false)
OPTION(verbose, "Select more verbose error messages.", verbose = true)
OPTION(v, "Short form for -verbose.", verbose = true)
OPTION(i, "Select interactive mode", optimize_level = 0)

// Case sensitivity
OPTVAR(case_sensitive, bool, true)
OPTION(nocase, "Make programs case-insensitive", case_sensitive = false)

// Stack depth
OPTVAR(stack_depth, uint, 1000)
OPTION(stack, "Select the evaluation stack depth",
       stack_depth = INTEGER(50,25000)) // Experimentally, 52K max on MacOSX

// Output file
OPTVAR(output_file, std::string, "")
OPTION(o, "Select output file", output_file = STRING)

// Debug controlling options
OPTVAR(debugPrefix, text, "")
OPTION(debug_prefix, "Select the prefix to debug", debugPrefix = STRING)
OPTVAR(dumpRecorder, bool, false)
OPTION(dump, "Dump the flight recorder on exit", dumpRecorder = true)

// Listen for input programs
OPTVAR(listen, int, 0)
OPTION(listen, "Listen to given port", listen = INTEGER(1, 99999999))
OPTION(l, "Listen to default port", listen = 1205)

OPTVAR(listen_forks, int, 20)
OPTION(forks, "Fork on listen", listen_forks = INTEGER(0, 1000))
OPTION(nofork, "Do not fork on listen", listen_forks = 0)

OPTION(t, "Enable or set recorder trace(s), 'list' to get list",
       kstring opt = STRING;
       recorder_trace_set(opt);
       if (strcmp(opt, "help") == 0 || strcmp(opt, "list") == 0)
           exit(0);)



// ============================================================================
//
//   Additional options
//
// ============================================================================

#include "options2.tbl"

// Undefine for next use...
#undef OPTVAR
#undef OPTION
