// ****************************************************************************
//  xl.builtins.xl                                  XL - An extensible language
// ****************************************************************************
//
//   File Description:
//
//     The built-in module for XL
//
//     What is defined in this module is imported by default
//
//
//
//
//
//
// ****************************************************************************
//  (C) 2018 Christophe de Dinechin <christophe@dinechin.org>
//   This software is licensed under the GNU General Public License v3
//   See LICENSE file for details.
// ****************************************************************************

byte_size  X is (7 + bit_size X) / 8
byte_align X is (7 + bit_size X) / 8

// If-then-else statement
if true  then TrueBody else FalseBody   is TrueBody
if false then TrueBody else FalseBody   is FalseBody

if true  then TrueBody                  is TrueBody
if false then TrueBody                  is false

// Console / debugging operations
write x:text            as boolean      is C xl_write_text
write x:integer         as boolean      is C xl_write_integer
write x:real            as boolean      is C xl_write_real
write x:character       as boolean      is C xl_write_character
writeln                 as boolean      is C xl_write_cr

write true              is write "true"
write false             is write "false"
write head, rest        is write head; write rest
writeln a               is write a; writeln

// Tree shape and attributes
kind  X:tree            as integer      is builtin TreeKind
left  X:prefix          as tree         is builtin TreeLeft
right X:prefix          as tree         is builtin TreeRight
left  X:postfix         as tree         is builtin TreeLeft
right X:postfix         as tree         is builtin TreeRight
left  X:infix           as tree         is builtin TreeLeft
right X:infix           as tree         is builtin TreeRight
name  X:infix           as text         is builtin InfixName
opening X:text          as text         is builtin TextOpening
closing X:text          as text         is builtin TextClosing
child X:block           as tree         is builtin BlockChild
opening X:block         as text         is builtin BlockOpening
closing X:block         as text         is builtin BlockClosing

// Min and max functions
min x, y is if x < min y then x else min y
min y    is y
max x, y is if x > max y then x else max y
max y    is y

// Interval test
X:real in A:real..B:real is X >= A and X <= B

// Factorial function
0! is 1
N:integer! is N * (N-1)!

// Boolean to text conversion
text true  is "true"
text false is "false"

// A few additional text notations
Source:text / From:text /  To:text      is text_replace Source, From, To
Pat:text in Src:text                    is text_index Src, Pat, 0
Pat:text in Src:text from Idx:integer   is text_index Src, Pat, Idx

// A utility function for C-style testing
good false is false
good 0     is false
good 0.0   is false
good ""    is false
good nil   is false
good Other is true

bad X      is not good X

// Loops
while Condition loop Body is
    if Condition then
        Body
        while Condition loop Body
until Condition loop Body               is while not Condition loop Body
loop Body                               is Body; loop Body
for Var in Low..High loop Body is
    Var := Low
    while Var < High loop
        Body
        Var := Var + 1

every Duration, Body is loop { Body; sleep Duration}
Duration:real h  is Duration * 3600
Duration:real m  is Duration * 60
Duration:real s  is Duration
Duration:real ms is Duration * 0.001
